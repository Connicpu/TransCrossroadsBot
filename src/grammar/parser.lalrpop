use chrono::{DateTime, FixedOffset, Utc};
use serenity;
use serenity::model::id::{UserId, ChannelId};

use std::str::FromStr;
use std::cmp::min;

use grammar::ast::{self, Command};
use commands::dice::{self, DiceRoll, DiceSpecifier};

#[LALR]
grammar(cmduser: UserId);

pub Command: (UserId, ast::Command) = {
    <CommandPrefix> => (<>, ast::Command::ThankYou),
    <CommandPrefix> ("can" "you" "please"?)? <CommandStub> CommandEnd* => (<>),
};

CommandPrefix: UserId = {
    <Mention> CommandPrefixEnd*,
};

CommandPrefixEnd: () = {
    ",", CommandEnd
};

CommandEnd: () = {
    "!", "?", ".", ";"
};

CommandStub: ast::Command = {
    <SetCommand>,
    ("tell" "me"?)? <StatCommand>,
    <ConversionCommand>,
    <AdminCommand>,

    <Niceties>,
};

ConversionCommand: ast::Command = {
    "convert" <v:Float> <from:Role> <chem:Role> "to" <to:Role> => Command::convert(v, chem, from, to),
};

SetCommand: ast::Command = {
    Set <target:Mention> "'s"? "pronouns" "to" <pronouns:(<Pronoun> Separator?)*> => Command::pronouns(target, pronouns),
    (Set "my"?)? "pronouns" "to"? <pronouns:(<Pronoun> Separator?)*> => Command::pronouns(cmduser, pronouns),
    TakeAway "my"? "pronouns" => Command::pronouns(cmduser, &["none"]),

    "give" <target:Mention> <roles:(<Role> Separator?)*> => Command::give_roles(target, roles),
    <target:Mention> "is" <roles:(<Role> Separator?)*> => Command::give_roles(target, roles),
    GiveMe <roles:(<Role> Separator?)*> => Command::give_roles(cmduser, roles),
    TakeAway "from"? <target:Mention> "'s"? <roles:(<Role> Separator?)*> => Command::take_roles(target, roles),
    TakeAway "my"? <roles:(<Role> Separator?)*> => Command::take_roles(cmduser, roles),
    GiveMe "not" "be"? <roles:(<Role> Separator?)*> => Command::take_roles(cmduser, roles),
};

Set: () = {
    "set",
    "change",
    "make",
};

GiveMe: () = {
    "give" "me",
    "make" "me",
    "gimme",
    "can" "i" "have",
    "i" "am",
    "i'm",
};

TakeAway: () = {
    "take",
    "remove",
    "delete",
    "rem",
    "del",
    "get" "rid" "of",
};

Separator: () = {
    ",",
    "and",
    "," "and",
};

StatCommand: ast::Command = {
    "how" "many" "posts" "has" <target:Mention> "made" => ast::Command::HowManyPosts(target),
    "how" "many" "posts" "have" "i" "made" => ast::Command::HowManyPosts(cmduser),
};

AdminCommand: ast::Command = {
    "rescan" "the" "pronoun" "list" "from" <high:Pronoun> "to" <low:Pronoun> => ast::Command::RescanPronouns(high, low),
    "rescan" "the" "role" "list" "from" <high:Role> "to" <low:Role> => ast::Command::RescanRoles(high, low),

    "alias" "role" <alias:Role> "to" <target:Role> => ast::Command::AliasRole(alias, target),
    "remove" "alias" <alias:Role> => ast::Command::RemoveAlias(alias),
    "list" "all" "roles" => ast::Command::ListAllRoles,
    "list" "all" "role" "aliases" => ast::Command::ListAllAliases,

    "i" "formally" "request" "a" "challenge" "code" "for" "a" "destructive" "action"
    => ast::Command::ChallengeCode,

    "immediately" "purge" "all" "records" "from" "this" "channel" ","
    <channel:ChanMention> "," "after" <time:TimeStamp> "," "before" <time2:TimeStamp> "."
    "i" "know" "this" "action" "may" "not" "be" "undone" "and" "am" "prepared" "for" "this"
    "action" "." "the" "challenge" "code" "is" ":" <challenge_code:Role>
    => ast::Command::PurgeChannel(channel, time, time2, challenge_code),

    "definitely" "do" "that" "purge" "haha" "rip" "all" <num:Num> "of" "those" "messages" "!"
    => ast::Command::ExecutePurge(num),

    "cancel" "purge" => ast::Command::CancelPurge,
};

Niceties: ast::Command = {
    Thanks "you"? => ast::Command::ThankYou,
    "omae" "wa" "mou" "shindeiru" => ast::Command::OmeaWaNoShinderu,
    "meow" => ast::Command::Meow,
};

Mention: UserId = <s:r#"<@(!)?[0-9]+>"#> => s.parse().unwrap();
ChanMention: ChannelId = <s:r#"<#[0-9]+>"#> => ChannelId(s[2..s.len()-1].parse().unwrap());
TimeStamp: DateTime<FixedOffset> = <s:r#"([0-9]+)-(0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[01])[Tt]([01][0-9]|2[0-3]):([0-5][0-9]):([0-5][0-9]|60)(\.[0-9]+)?(([Zz])|([\+|\-]([01][0-9]|2[0-3]):[0-5][0-9]))"#> => {
    DateTime::parse_from_rfc3339(s).unwrap_or_else(|_| {
        let now = ::std::time::SystemTime::now();
        let now: DateTime<Utc> = now.into();
        DateTime::from_utc(now.naive_utc(), FixedOffset::east(0))
    })
};
Num: u32 = <s:r#"[0-9]+"#> => s.parse().unwrap();
FloatWithDot: f64 = <s:r#"[0-9]+\.[0-9]+"#> => s.parse().unwrap();

Float: f64 = {
    <n:Num> => n as f64,
    FloatWithDot,
};

Pronoun: String = {
    "any" => "any".into(),
    "none" => "none".into(),
    "she" => "she/her".into(),
    "they" => "they/them".into(),
    "he" => "he/him".into(),
    <PronounForm>
};
PronounForm: String = <s:Role> => {
    let split = s.split('/').collect::<Vec<_>>();
    split[..min(2, split.len())].join("/")
};

Role: String = {
    NameRole,
    "???sexual" => "???sexual".to_string(),
    "a" => "a".to_string(),
    <n:Num> => n.to_string(),
};
NameRole: String = <s:r#"[A-Za-z][A-Za-z\-/&\(\)]*"#> => s.chars().flat_map(|c| c.to_lowercase()).collect();

Thanks: () = {
    "thank", "thanks" => ()
};

DiceSpecifier: DiceSpecifier = <s:r#"([0-9]*)d([0-9]+)"#> => {
    let mut parts = s.split("d");
    let num = parts.next().unwrap().parse().unwrap_or(1);
    let sides = parts.next().unwrap().parse().unwrap();
    assert!(parts.next().is_none());

    DiceSpecifier { num, sides }
};
