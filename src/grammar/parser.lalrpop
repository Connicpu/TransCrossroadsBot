use std::str::FromStr;
use serenity;
use serenity::model::id::UserId;

use grammar::ast;

#[LALR]
grammar(cmduser: UserId);

pub Command: (UserId, ast::Command) = {
    <CommandPrefix> ("can" "you" "please"?)? <CommandStub> "?"? => (<>)
};

CommandPrefix: UserId = {
    <Mention> CommandPrefixEnd?
};

CommandPrefixEnd: () = {
    ",", "!", "?", "."
};

CommandStub: ast::Command = {
    <SetCommand>,
    ("tell" "me"?)? <StatCommand>,
    <AdminCommand>,

    <Niceties>,
};

SetCommand: ast::Command = {
    "set" <target:Mention> "'s"? "pronouns" "to" <pronouns:(<Pronoun> Separator?)*> => {
        ast::Command::SetPronouns {
            target,
            pronouns,
        }
    },

    ("set" "my")? "pronouns" "to"? <pronouns:(<Pronoun> Separator?)*> => {
        ast::Command::SetPronouns {
            target: cmduser,
            pronouns,
        }
    },

    "remove" "my" "pronouns" => {
        ast::Command::SetPronouns {
            target: cmduser,
            pronouns: vec!["none".into()],
        }
    },

    "give" <target:Mention> <roles:(<Role> Separator?)*> => {
        ast::Command::GiveRoles {
            target,
            roles,
        }
    },

    "give" "me" <roles:(<Role> Separator?)*> => {
        ast::Command::GiveRoles {
            target: cmduser,
            roles,
        }
    },

    "take" "away" "from" <target:Mention> <roles:(<Role> Separator?)*> => {
        ast::Command::TakeRoles {
            target,
            roles,
        }
    },

    "take" "away" "my"? <roles:(<Role> Separator?)*> => {
        ast::Command::TakeRoles {
            target: cmduser,
            roles,
        }
    },
};

Separator: () = {
    ",",
    "and",
    "," "and",
};

StatCommand: ast::Command = {
    "how" "many" "posts" "has" <target:Mention> "made" => {
        ast::Command::HowManyPosts(target)
    },
    "how" "many" "posts" "have" "i" "made" => {
        ast::Command::HowManyPosts(cmduser)
    },
};

AdminCommand: ast::Command = {
    "rescan" "the" "pronoun" "list" "from" <high:Pronoun> "to" <low:Pronoun> => {
        ast::Command::RescanPronouns(high, low)
    },

    "rescan" "the" "role" "list" "from" <high:Role> "to" <low:Role> => {
        ast::Command::RescanRoles(high, low)
    },

    "alias" "role" <alias:Role> "to" <target:Role> => {
        ast::Command::AliasRole(alias, target)
    },

    "remove" "alias" <alias:Role> => ast::Command::RemoveAlias(alias),
    "list" "all" "role" "aliases" => ast::Command::ListAllAliases,
};

Niceties: ast::Command = {
    Thanks "you"? "!"? => ast::Command::ThankYou,
};

pub Mention: UserId = <s:r#"<@(!)?[A-Za-z0-9]+>"#> => s.parse().unwrap();

pub Pronoun: String = {
    "any" => "any".into(),
    "none" => "none".into(),
    "she" => "she/her".into(),
    "they" => "they/them".into(),
    "he" => "he/him".into(),
    <PronounForm>
};
PronounForm: String = <s:r#"[A-Za-z']+(/[A-Za-z']+)+"#> => {
    let lower = s.chars().flat_map(|c| c.to_lowercase()).collect::<String>();
    let split = lower.split('/').collect::<Vec<_>>();
    split[..2].join("/")
};

pub Role: String = <s:r#"[A-Za-z-]+"#> => s.chars().flat_map(|c| c.to_lowercase()).collect();

Thanks: () = {
    "thank", "thanks" => ()
};
